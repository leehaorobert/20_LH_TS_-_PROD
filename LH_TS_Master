'''
================================================================================
LH策略模型说明
0.总体回测前
    0.1.定义中间变量（在每个交易日被调用和保存）
    0.2.定义回测条件
    0.3.定义基准
1.每天开盘前
    1.1.定义回测参数
    1.2.定义滑点和手续费
    1.3.定义股票池
    1.4.仓位计算和调整（新）
2.每天交易时
    2.1.每日调整（获利退出）
    2.2.周期调整
        2.2.1.价值策略
            2.2.1.1.获取备选股票列表（PEG策略+排序+行业限制）
            2.2.1.2.获得股票买入清单
            2.2.1.3.获得股票卖出清单
            2.2.1.4.股票卖出操作
            2.2.1.5.股票买入操作
        2.2.2.趋势策略
            2.2.2.1.获取备选股票列表（趋势策略）
            2.2.2.2.获得股票买入清单
            2.2.2.3.获得股票卖出清单
            2.2.2.4.股票卖出操作
            2.2.2.5.股票买入操作
3.每天收盘后（无）
================================================================================
'''

'''
================================================================================
#导入Python库文件
================================================================================
'''
import pandas as pd
import numpy as np
from six import StringIO


'''
================================================================================
0.总体回测前
================================================================================
'''
# 总体回测前要做的事情,g变量设定后无法在交易中通过更新代码的方式进行修改
def initialize(context):
    set_variables()                          # 设置中间变量
    set_backtest()                           # 设置回测条件
    #set_benchmark('000300.XSHG')             # 设置回测基准
    set_benchmark('399006.XSHE')

    # 设定subportfolios[0]为价值策略仓位，初始为80%
    # 设定subportfolios[1]为趋势策略仓位，初始为20%
    set_subportfolios(
        [SubPortfolioConfig(cash=context.portfolio.starting_cash*0, type='stock'),
        SubPortfolioConfig(cash=context.portfolio.starting_cash*1,type='stock')])

# 0.1.定义中间变量（在每个交易日被调用和保存
def set_variables():
    g.t = 0                                  # 记录回测运行的天数
    g.if_trade = False                       # 当天是否交易


# 0.2.定义回测条件
def set_backtest():
    set_option('use_real_price',True)        # 用真实价格交易
    log.set_level('order','error')           # 设置报错等级


'''
================================================================================
1.每天开盘前
================================================================================
'''
# 每天开盘前要做的事情
def before_trading_start(context):

    # 1.1.定义回测参数
    g.tc = 1                                 # 调仓的周期（周）
    g.start_of_week = 4                      # 调仓的时间点,0:周一
    g.num_stocks = 10                        # 每次调仓选取的最大股票数量
    g.intra_industry_count = 3               # 定义组合中同一个行业的股票个数


    # 取当日的日历
    current_weekday = context.current_dt.weekday()

    # 例如：调仓频率的控制，通过if函数来控制
    if current_weekday == g.start_of_week:
        # 调仓频率
        if g.t % g.tc == 0:
            # 每g.tc天，调仓一次
            g.if_trade = True
            # 设置手续费
            set_slip_fee(context)

            # 设置股票池,股票池会随着新股上市而变化
            g.stocks = get_index_stocks('000300.XSHG') # 设置沪深300为初始股票池
            g.stocks_1 = get_index_stocks('399006.XSHE')
            g.stocks.extend(g.stocks_1)

            # 设置可行股票池，去除当日停牌的股票
            g.feasible_stocks = set_feasible_stocks(g.stocks,context)

        g.t += 1
    else:
        # 当不满足操作条件时，当日无操作
        g.if_trade = False

    # 1.4.仓位计算和调整（新）
    # 进行趋势转换的判断，判断条件为多均线上扬
    # 当沪深300启动牛市趋势时，价值策略占20%，趋势投资占80%
    # 当沪深300结束牛市趋势时，价值投资占80%，趋势投资占20%
    # 待完成


# 1.2.定义滑点和手续费
def set_slip_fee(context):
    # 将滑点设置为0
    set_slippage(FixedSlippage(0))
    # 根据不同的时间段设置手续费
    dt=context.current_dt
    if dt>datetime.datetime(2013,1, 1):
        set_commission(PerTrade(buy_cost=0.0003, sell_cost=0.0013, min_cost=5))
    elif dt>datetime.datetime(2011,1, 1):
        set_commission(PerTrade(buy_cost=0.001, sell_cost=0.002, min_cost=5))
    elif dt>datetime.datetime(2009,1, 1):
        set_commission(PerTrade(buy_cost=0.002, sell_cost=0.003, min_cost=5))
    else:
        set_commission(PerTrade(buy_cost=0.003, sell_cost=0.004, min_cost=5))


# 1.3.定义股票池：过滤掉当日停牌的股票
# 输入：initial_stocks为list类型,表示初始股票池； context（见API）
# 输出：unsuspened_stocks为list类型，表示当日未停牌的股票池，即：可行股票池
def set_feasible_stocks(initial_stocks,context):
    # 判断初始股票池的股票是否停牌，返回list
    paused_info = []
    current_data = get_current_data()
    for i in initial_stocks:
        paused_info.append(current_data[i].paused)
    df_paused_info = pd.DataFrame({'paused_info':paused_info},index = initial_stocks)
    unsuspened_stocks =list(df_paused_info.index[df_paused_info.paused_info == False])
    return unsuspened_stocks

# 1.4.仓位计算和调整（新）
# 输出为：仓位调整信号


'''
================================================================================
2.每天交易时
================================================================================
'''
# 每个单位时间(如果按天回测,则每天调用一次,如果按分钟,则每分钟调用一次)调用一次
def handle_data(context, data):

    # 2.1.每日调整（获利退出）及仓位调整时的操作
    # 仓位调整的部分待完成
    # 调整逻辑：
    # 1.外出待调整部分
    # 2.仓位间的现金转移

    # 2.2.周期调整
    # 2.2.1.价值策略
    # 在调仓日进行操作

    # 2.2.2.趋势策略
    # 假定只在调仓日进行操作
    if g.if_trade == True:
        # 取得备选股票列表
        security_pool_trend = security_pool_trend_prep(context)
        # 股票买入判断
        list_to_buy_trend = security_pool_trend
        # 股票卖出判断
        list_to_sell_trend = stocks_to_sell(context, 1, list_to_buy_trend)
        # 卖出操作
        sell_operation(1, list_to_sell_trend)
        # LH: 买入操作
        message_buy_trend = buy_operation(context, 1, list_to_buy_trend)

        # 发送消息：
        message_all_trend = ['Trend Strategy - Sell Security']
        message_all_trend.extend(list_to_sell_trend)
        message_all_trend.append('Trend Strategy - Buy Security')
        message_all_trend.extend(message_buy_trend)
        send_message(message_all_trend)
        log.info(message_all_trend)


################################################################################
################################################################################
# 每日操作
# 0

################################################################################
################################################################################
# 取得备选股票列表

# 计算股票的PEG值
# 输入：context(见API)；stock_list为list类型，表示股票池
# 输出：df_PEG为dataframe: index为股票代码，data为相应的PEG值

# 限定每个细分行业只能有2支股票

################################################################################
################################################################################
# 趋势策略
def security_pool_trend_prep(context):
    # 变量初始化
    stock_index_inc = []

    # 取得行业指数列表
    stock_index_list = ['399231.XSHE', #农林指数
                        '399232.XSHE', #采矿指数
                        '399233.XSHE', #制造指数
                        '399234.XSHE', #水电指数
                        '399235.XSHE', #建筑指数
                        '399236.XSHE', #批零指数
                        '399237.XSHE', #运输指数
                        '399238.XSHE', #餐饮指数
                        '399239.XSHE', #IT指数
                        '399240.XSHE', #金融指数
                        '399241.XSHE', #地产指数
                        '399242.XSHE', #商务指数
                        '399243.XSHE', #科研指数
                        '399244.XSHE', #公共指数
                        '399248.XSHE', #文化指数
                        '399249.XSHE'] #综企指数

    # 取得过去5天按时间正序排列的收盘价
    # LH1.1: 取过去10天的数据
    df_stock_index = history(count=10, unit='1d', field='close', security_list=stock_index_list)

    # LH1.1：计算过去5天的增速
    for stock_index_i in stock_index_list:
        # 增幅 = 交易前一天的收盘价 / 前N天的收盘价
        # LH1.1: 取增速作为条件
        stock_index_inc_tmp = (df_stock_index[stock_index_i][-1]-df_stock_index[stock_index_i][5])/(df_stock_index[stock_index_i][4]-df_stock_index[stock_index_i][0])
        stock_index_inc.append(stock_index_inc_tmp)

    # 创建指数的DataFrame,并排序
    df_stock_index_pool = pd.DataFrame(index=stock_index_list)
    df_stock_index_pool['index_inc'] = stock_index_inc
    # 将指数按照升序排列，返回daraframe类型, 1是升序，0是降序
    # LH1.2：取降序，取增速排序倒数第二的行业
    df_stock_index_pool_sort = df_stock_index_pool.sort(columns='index_inc', ascending=[0])
    # LH1.2：取降序，取增速排序倒数第二的行业
    df_stock_index_pool_sort_tmp = df_stock_index_pool_sort.head(15)
    df_stock_index_pool_sort_head = df_stock_index_pool_sort_tmp.tail(1)
    # 取得指数列表(index的值)
    stock_index_list = df_stock_index_pool_sort_head.index.values

    # 取得每个行业的前两名
    # 待定4：是否取前两名
    stock_list = []
    for index_i in stock_index_list:
        # 取得指数对应的股票列表
        index_i_stock_list = get_index_stocks(index_i)
        # 取得股票对应的市值
        q_market_cap = query(valuation.code, valuation.market_cap).filter(valuation.code.in_(index_i_stock_list))
        df_market_cap = get_fundamentals(q_market_cap)
        # 取市值最大的2值股票加入统计
        # 针对市值进行降序排序
        df_market_cap_sort = df_market_cap.sort(columns='market_cap', ascending=[0])
        # 取排序前2名市值最大的股票
        # LH1.2: 取市值排名最大的股票
        df_market_cap_sort_first_tmp = df_market_cap_sort.head(1)
        df_market_cap_sort_first = df_market_cap_sort_first_tmp.tail(1)
        # 取得该指数的股票对象
        stock_list_tmp = df_market_cap_sort_first['code'].values
        # 组合到输出列表中，注意两个列表组合时，使用extend函数而不是append函数
        stock_list.extend(stock_list_tmp)

    return stock_list

################################################################################
################################################################################
# 多仓（买入）信号汇总信号判断

################################################################################
################################################################################
# 空仓（卖出）信号判断
# 输入：context（见API文档）, list_to_buy为list类型，代表待买入的股票
# 输出：list_to_sell为list类型，表示待卖出的股票
def stocks_to_sell(context, subportfolio_num, list_to_buy):
    list_to_sell=[]
    current_data = get_current_data()
    # 对于不需要持仓的股票，全仓卖出
    for stock_sell in context.subportfolios[subportfolio_num].long_positions:
        # 条件1：该股票是否停牌
        paused_status = current_data[stock_sell].paused
        if paused_status == False:
            # 条件2：该股票是否涨停
            today_open = current_data[stock_sell].day_open
            yest_close = history(count=1, unit='1d', field='close', security_list=stock_sell).values
            full_growth_status = (today_open/yest_close > 1.09)
            if full_growth_status == False:
                # 条件3：该股票是否在购买清单中
                if stock_sell not in list_to_buy:
                    list_to_sell.append(stock_sell)

    return list_to_sell

################################################################################
################################################################################
# 卖出及买入操作
# 输入：list_to_sell为list类型，表示待卖出的股票
# 输出：none
def sell_operation(subportfolio_num, list_to_sell):
    for stock_sell in list_to_sell:
        order_target_value(stock_sell, 0, pindex=subportfolio_num)

# 执行买入操作
# 输入：context(见API)；list_to_buy为list类型，表示待买入的股票
# 输出：none
def buy_operation(context, subportfolio_num, list_to_buy):
    #for stock_sell in list_to_buy:

    # 为每个持仓股票分配资金
    g.capital_unit=context.subportfolios[subportfolio_num].total_value/len(list_to_buy)

    # LH：当前的持股信息
    current_security = context.subportfolios[subportfolio_num].long_positions.keys()
    # 消息列表
    message_buy = []

    # 买入在“待买股票列表”的股票
    for stock_buy in list_to_buy:
        if stock_buy not in current_security:
            order_target_value(stock_buy, g.capital_unit, pindex=subportfolio_num)
            message_buy.append(stock_buy)

    return message_buy

'''
================================================================================
每天收盘后
================================================================================
'''
# 每天收盘后做的事情
# 进行长运算（本策略中不需要）
def after_trading_end(context):

    #print context.subportfolios[1]

    return
